import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'
import { api } from '@/shared/api/base'
import { toast } from 'sonner'

// –ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏
export interface BaseEntity {
  id: string
  createdAt: string
  updatedAt?: string
}

export interface PaginatedResponse<T> {
  data: T[]
  total: number
  page: number
  limit: number
  totalPages?: number
}

export interface ApiResponse<T> {
  data: T
  message?: string
  success?: boolean
}

export interface ModelSearchParams {
  page?: number
  limit?: number
  search?: string
  sortBy?: string
  sortOrder?: 'asc' | 'desc'
  filters?: Record<string, any>
  [key: string]: any
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
const modelEndpoints: Record<string, string> = {
  notifications: '/notifications', // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
  users: '/admin/users', 
  orders: '/orders',
  settings: '/settings',
  admins: '/admins',
  products: '/products',
  deposits: '/operations/admin/deposits', // –ê–¥–º–∏–Ω—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ DEPOSIT —Ç–∏–ø—ã)
  appWallet: '/app-wallet', // –ê–¥–º–∏–Ω—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è app wallet
  leaderboardParticipants: '/leaderboard/admin/participants',
  // –ú–æ–∂–Ω–æ –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ URL –º–æ–¥–µ–ª–∏
function getModelEndpoint(model: string): string {
  const endpoint = modelEndpoints[model]
  if (!endpoint) {
    throw new Error(`Endpoint for model "${model}" not configured`)
  }
  return endpoint
}

// –ö–ª—é—á–∏ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
export const modelKeys = {
  all: (model: string) => [model] as const,
  lists: (model: string) => [...modelKeys.all(model), 'list'] as const,
  list: (model: string, params?: ModelSearchParams) => [...modelKeys.lists(model), params] as const,
  details: (model: string) => [...modelKeys.all(model), 'detail'] as const,
  detail: (model: string, id: string) => [...modelKeys.details(model), id] as const,
  stats: (model: string) => [...modelKeys.all(model), 'stats'] as const,
}

// ============================================================================
// –û–°–ù–û–í–ù–´–ï –•–£–ö–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ú–û–î–ï–õ–Ø–ú–ò
// ============================================================================

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –º–æ–¥–µ–ª–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
export function useModelList<T extends BaseEntity>(
  model: string, 
  params?: ModelSearchParams,
  options?: {
    enabled?: boolean
    refetchInterval?: number
    staleTime?: number
  }
) {
  return useQuery({
    queryKey: modelKeys.list(model, params),
    queryFn: async (): Promise<PaginatedResponse<T>> => {
      try {
        const endpoint = getModelEndpoint(model)
        const page = params?.page || 1
        const limit = params?.limit || 10

        const response = await api.get<any>(endpoint, {
          params: {
            page,
            limit,
            ...params
          }
        })
        
        console.log(`üìä API Response for ${model}:`, response.data) // Debug logging
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è users (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞)
        if (model === 'users' && response.data?.success) {
          return {
            data: response.data.data || [],
            total: response.data.pagination?.total || 0,
            page: response.data.pagination?.page || page,
            limit: response.data.pagination?.limit || limit,
            totalPages: response.data.pagination?.totalPages || 0
          } as PaginatedResponse<T>
        }

        // –°–ø–µ—Ü-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è leaderboardParticipants (AdminParticipantsListResponseDto)
        if (model === 'leaderboardParticipants' && response.data && 'data' in response.data && 'total' in response.data) {
          const d = response.data
          return {
            data: d.data || [],
            total: d.total || 0,
            page: d.page || page,
            limit: d.limit || limit,
            totalPages: d.totalPages || Math.ceil((d.total || 0) / (d.limit || limit)),
          } as PaginatedResponse<T>
        }
        
        // –ë—ç–∫–µ–Ω–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ PaginatedResponse
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        if (typeof response.data === 'object' && response.data !== null && 'data' in response.data && 'total' in response.data) {
          return response.data as unknown as PaginatedResponse<T>
        }
        
        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –æ–±–µ—Ä–Ω—É—Ç –≤ ApiResponse
        if (typeof response.data === 'object' && response.data !== null && 'data' in response.data && typeof response.data.data === 'object' && 'data' in response.data.data) {
          return (response.data as ApiResponse<PaginatedResponse<T>>).data
        }
        
        // Fallback - –ø—ã—Ç–∞–µ–º—Å—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ PaginatedResponse
        return response.data as unknown as PaginatedResponse<T>
      } catch (error) {
        console.error(`‚ùå API Error for ${model}:`, error)
        throw error
      }
    },
    enabled: options?.enabled !== false,
    refetchInterval: options?.refetchInterval,
    staleTime: options?.staleTime || 1000 * 60 * 5, // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    refetchOnWindowFocus: true,
  })
}

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ ID
 */
export function useModelItem<T extends BaseEntity>(
  model: string, 
  id: string, 
  options?: {
    enabled?: boolean
    staleTime?: number
  }
) {
  return useQuery({
    queryKey: modelKeys.detail(model, id),
    queryFn: async (): Promise<T> => {
      const endpoint = getModelEndpoint(model)
      const response = await api.get<ApiResponse<T> | T>(`${endpoint}/${id}`)
      
      // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      if (typeof response.data === 'object' && response.data !== null && 'data' in response.data) {
        return (response.data as ApiResponse<T>).data
      }
      
      return response.data as T
    },
    enabled: !!id && options?.enabled !== false,
    staleTime: options?.staleTime || 1000 * 60 * 5,
  })
}

/**
 * –•—É–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
 */
export function useCreateModel<T extends BaseEntity, TCreate = Partial<T>>(
  model: string,
  options?: {
    onSuccess?: (data: T) => void
    onError?: (error: any) => void
    showToast?: boolean
  }
) {
  const queryClient = useQueryClient()
  
  return useMutation({
    mutationFn: async (data: TCreate): Promise<T> => {
      const endpoint = getModelEndpoint(model)
      const response = await api.post<ApiResponse<T> | T>(endpoint, data)
      
      // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      if (typeof response.data === 'object' && response.data !== null && 'data' in response.data) {
        return (response.data as ApiResponse<T>).data
      }
      
      return response.data as T
    },
    onSuccess: (data) => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à —Å–ø–∏—Å–∫–æ–≤
      queryClient.invalidateQueries({ queryKey: modelKeys.lists(model) })
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –¥–µ—Ç–∞–ª–µ–π
      queryClient.setQueryData(modelKeys.detail(model, data.id), data)
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      queryClient.invalidateQueries({ queryKey: modelKeys.stats(model) })
      
      if (options?.showToast !== false) {
        toast.success(`${getModelDisplayName(model)} created successfully`)
      }
      
      options?.onSuccess?.(data)
    },
    onError: (error: any) => {
      const message = error.response?.data?.message || `Error creating ${getModelDisplayName(model).toLowerCase()}`
      
      if (options?.showToast !== false) {
        toast.error(message)
      }
      
      options?.onError?.(error)
    },
  })
}

/**
 * –•—É–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
 */
export function useUpdateModel<T extends BaseEntity, TUpdate = Partial<T>>(
  model: string,
  options?: {
    onSuccess?: (data: T) => void
    onError?: (error: any) => void
    showToast?: boolean
  }
) {
  const queryClient = useQueryClient()
  
  return useMutation({
    mutationFn: async ({ id, data }: { id: string; data: TUpdate }): Promise<T> => {
      const endpoint = getModelEndpoint(model)
      const response = await api.put<ApiResponse<T> | T>(`${endpoint}/${id}`, data)
      
      // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      if (typeof response.data === 'object' && response.data !== null && 'data' in response.data) {
        return (response.data as ApiResponse<T>).data
      }
      
      return response.data as T 
    },
    onSuccess: (data, variables) => {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å–ø–∏—Å–∫–æ–≤
      queryClient.invalidateQueries({ queryKey: modelKeys.lists(model) })
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –¥–µ—Ç–∞–ª–µ–π —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏—Å—å –∑–∞–Ω–æ–≤–æ
      queryClient.invalidateQueries({ queryKey: modelKeys.detail(model, variables.id) })
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      queryClient.invalidateQueries({ queryKey: modelKeys.stats(model) })
      
      console.log(`‚úÖ Cache invalidated for ${model} with id: ${variables.id}`)
      
      if (options?.showToast !== false) {
        toast.success(`${getModelDisplayName(model)} updated successfully`)
      }
      
      options?.onSuccess?.(data)
    },
    onError: (error: any) => {
      const message = error.response?.data?.message || `Error updating ${getModelDisplayName(model).toLowerCase()}`
      
      if (options?.showToast !== false) {
        toast.error(message)
      }
      
      options?.onError?.(error)
    },
  })
}

/**
 * –•—É–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
 */
export function useDeleteModel(
  model: string,
  options?: {
    onSuccess?: (id: string) => void
    onError?: (error: any) => void
    showToast?: boolean
  }
) {
  const queryClient = useQueryClient()
  
  return useMutation({
    mutationFn: async (id: string): Promise<void> => {
      const endpoint = getModelEndpoint(model)
      await api.delete(`${endpoint}/${id}`)
    },
    onSuccess: (_, deletedId) => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à —Å–ø–∏—Å–∫–æ–≤
      queryClient.invalidateQueries({ queryKey: modelKeys.lists(model) })
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞ –¥–µ—Ç–∞–ª–µ–π
      queryClient.removeQueries({ queryKey: modelKeys.detail(model, deletedId) })
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      queryClient.invalidateQueries({ queryKey: modelKeys.stats(model) })
      
      if (options?.showToast !== false) {
        toast.success(`${getModelDisplayName(model)} deleted successfully`)
      }
      
      options?.onSuccess?.(deletedId)
    },
    onError: (error: any) => {
      const message = error.response?.data?.message || `Error deleting ${getModelDisplayName(model).toLowerCase()}`
      
      if (options?.showToast !== false) {
        toast.error(message)
      }
      
      options?.onError?.(error)
    },
  })
}

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–∏
 */
export function useModelStats<T = any>(
  model: string,
  options?: {
    enabled?: boolean
    refetchInterval?: number
  }
) {
  return useQuery({
    queryKey: modelKeys.stats(model),
    queryFn: async (): Promise<T> => {
      const endpoint = getModelEndpoint(model)
      const response = await api.get<ApiResponse<T> | T>(`${endpoint}/stats`)
      
      // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      if (typeof response.data === 'object' && response.data !== null && 'data' in response.data) {
        return (response.data as ApiResponse<T>).data
      }
      
      return response.data as T
    },
    enabled: options?.enabled !== false,
    refetchInterval: options?.refetchInterval || 1000 * 60 * 10, // 10 –º–∏–Ω—É—Ç
    staleTime: 1000 * 60 * 5, // 5 –º–∏–Ω—É—Ç
  })
}

/**
 * –•—É–∫ –¥–ª—è –ø–∞–∫–µ—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export function useBulkActions<T extends BaseEntity>(
  model: string,
  options?: {
    onSuccess?: (action: string, ids: string[]) => void
    onError?: (error: any) => void
    showToast?: boolean
  }
) {
  const queryClient = useQueryClient()
  
  return useMutation({
    mutationFn: async ({ action, ids, data }: { 
      action: 'delete' | 'update' | 'activate' | 'deactivate'
      ids: string[]
      data?: any 
    }): Promise<T[]> => {
      const endpoint = getModelEndpoint(model)
      const response = await api.post<ApiResponse<T[]> | T[]>(`${endpoint}/bulk`, {
        action,
        ids,
        data
      })
      
      // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      if (response.data && 'data' in response.data) {
        return (response.data as ApiResponse<T[]>).data
      }
      
      return response.data as T[]
    },
    onSuccess: (data, variables) => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤–µ—Å—å –∫—ç—à –º–æ–¥–µ–ª–∏
      queryClient.invalidateQueries({ queryKey: modelKeys.all(model) })
      
      if (options?.showToast !== false) {
        toast.success(`–ü–∞–∫–µ—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è "${variables.action}" –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è ${variables.ids.length} –∑–∞–ø–∏—Å–µ–π`)
      }
      
      options?.onSuccess?.(variables.action, variables.ids)
    },
    onError: (error: any) => {
      const message = error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏'
      
      if (options?.showToast !== false) {
        toast.error(message)
      }
      
      options?.onError?.(error)
    },
  })
}

// ============================================================================
// –£–¢–ò–õ–ò–¢–´ –ò –•–ï–õ–ü–ï–†–´
// ============================================================================

/**
 * –•—É–∫ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏
 */
export function usePrefetchModel() {
  const queryClient = useQueryClient()
  
  return {
    prefetchList: (model: string, params?: ModelSearchParams) => {
      queryClient.prefetchQuery({
        queryKey: modelKeys.list(model, params),
        queryFn: async () => {
          const endpoint = getModelEndpoint(model)
          const response = await api.get(endpoint, { params })
          return response.data
        },
        staleTime: 1000 * 60 * 5,
      })
    },
    
    prefetchItem: (model: string, id: string) => {
      queryClient.prefetchQuery({
        queryKey: modelKeys.detail(model, id),
        queryFn: async () => {
          const endpoint = getModelEndpoint(model)
          const response = await api.get(`${endpoint}/${id}`)
          return response.data
        },
        staleTime: 1000 * 60 * 5,
      })
    }
  }
}

/**
 * –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
export function useModelPagination(initialPage = 1, initialPageSize = 10) {
  const [page, setPage] = React.useState(initialPage)
  const [pageSize, setPageSize] = React.useState(initialPageSize)
  
  const paginationConfig = React.useCallback((total: number) => ({
    page,
    pageSize,
    total,
    totalPages: Math.ceil(total / pageSize),
    onPageChange: setPage,
    onPageSizeChange: (newSize: number) => {
      setPageSize(newSize)
      setPage(1) // –°–±—Ä–æ—Å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
    },
  }), [page, pageSize])
  
  return {
    page,
    pageSize,
    setPage,
    setPageSize,
    paginationConfig,
    params: { page, limit: pageSize }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏
function getModelDisplayName(model: string): string {
  const displayNames: Record<string, string> = {
    notifications: 'Notification',
    users: 'User',
    orders: 'Order',
    settings: 'Setting',
    admins: 'Admin',
    products: 'Product',
    appWallet: 'App Wallet',
  }
  
  return displayNames[model] || model
}

// –î–æ–±–∞–≤–ª—è–µ–º React –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ö—É–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è
import React from 'react'
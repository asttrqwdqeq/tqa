"use client"

import { use } from "react"
import { useRouter } from "next/navigation"
import { Plus, Settings, Filter, RefreshCw } from "lucide-react"

import { Button } from "@/shared/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/shared/components/ui/card"
import { Badge } from "@/shared/components/ui/badge"
import { 
  UniversalTable, 
  AdvancedUniversalTable,
  useServerPagination,
  columnHelpers,
  commonColumns,
  type TableConfig,
  type AdvancedTableConfig 
} from "@/shared/components/data-table"

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
const modelConfigs = {
  notifications: {
    title: "Notifications",
    description: "Manage system notifications",
    icon: "üì¢",
    color: "blue"
  },
  users: {
    title: "Users", 
    description: "Manage system users",
    icon: "üë•",
    color: "green"
  },
  appWallet: {
    title: "App Wallet",
    description: "Manage app wallet",
    icon: "üí∞", 
    color: "blue"
  }
} as const

// –¢–∏–ø—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
interface BaseEntity {
  id: string
  createdAt: string
  updatedAt: string
}

interface NotificationEntity extends BaseEntity {
  title: string
  message: string
  isAlert: boolean
}

interface UserEntity extends BaseEntity {
  name: string
  email: string
  role: "admin" | "user" | "moderator"
  isActive: boolean
  lastLogin?: string
}

interface OrderEntity extends BaseEntity {
  orderNumber: string
  customerName: string
  total: number
  status: "pending" | "paid" | "shipped" | "delivered" | "cancelled"
}

interface AppWalletEntity extends BaseEntity {
  userCount?: number
}

import { 
  useModelList, 
  useDeleteModel,
  useModelPagination,
  usePrefetchModel 
} from '@/shared/hooks'

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ API
function useModelData(model: string) {
  const { page, pageSize, params } = useModelPagination(1, 10)
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö—É–∫
  const { data: apiData, isLoading, error } = useModelList(model, params, {
    enabled: ['notifications', 'appWallet'].includes(model), // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API –¥–ª—è notifications –∏ appWallet
    staleTime: 1000 * 60 * 2, // 2 –º–∏–Ω—É—Ç—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  })
  
  // Fallback –Ω–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  const generateMockData = () => {
    switch (model) {
      case "notifications":
        return {
          data: Array.from({ length: pageSize || 10 }, (_, i) => ({
            id: `notif-${page || 1}-${i}`,
            title: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${((page || 1) - 1) * (pageSize || 10) + i + 1}`,
            message: `–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä ${((page || 1) - 1) * (pageSize || 10) + i + 1}. –≠—Ç–æ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã.`,
            isAlert: Math.random() > 0.5,
            createdAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString(),
            updatedAt: new Date().toISOString()
          })) as NotificationEntity[],
          total: 127,
          isLoading: false
        }
        
      case "users":
        return {
          data: Array.from({ length: pageSize || 10 }, (_, i) => ({
            id: `user-${page || 1}-${i}`,
            name: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${((page || 1) - 1) * (pageSize || 10) + i + 1}`,
            email: `user${((page || 1) - 1) * (pageSize || 10) + i + 1}@example.com`,
            role: ["admin", "user", "moderator"][Math.floor(Math.random() * 3)] as any,
            isActive: Math.random() > 0.2,
            lastLogin: Math.random() > 0.3 ? new Date(Date.now() - Math.random() * 24 * 60 * 60 * 1000).toISOString() : undefined,
            createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),
            updatedAt: new Date().toISOString()
          })) as UserEntity[],
          total: 89,
          isLoading: false
        }
        
      case "orders":
        return {
          data: Array.from({ length: pageSize || 10 }, (_, i) => ({
            id: `order-${page || 1}-${i}`,
            orderNumber: `ORD-${String(((page || 1) - 1) * (pageSize || 10) + i + 1).padStart(6, '0')}`,
            customerName: `–ö–ª–∏–µ–Ω—Ç ${((page || 1) - 1) * (pageSize || 10) + i + 1}`,
            total: Math.floor(Math.random() * 50000) + 1000,
            status: ["pending", "paid", "shipped", "delivered", "cancelled"][Math.floor(Math.random() * 5)] as any,
            createdAt: new Date(Date.now() - Math.random() * 14 * 24 * 60 * 60 * 1000).toISOString(),
            updatedAt: new Date().toISOString()
          })) as OrderEntity[],
          total: 234,
          isLoading: false
        }
        
              case "appWallet":
          return {
            data: Array.from({ length: pageSize || 10 }, (_, i) => ({
              id: `wallet-${String(((page || 1) - 1) * (pageSize || 10) + i + 1).padStart(6, '0')}`,
              createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),
              updatedAt: new Date().toISOString(),
              userCount: Math.floor(Math.random() * 50)
            })) as AppWalletEntity[],
            total: 45,
            isLoading: false
          }
        
      default:
        return {
          data: [],
          total: 0,
          isLoading: false,
          page: 1,
          pageSize: 10
        }
    }
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
  if (error) {
    console.warn(`API –æ—à–∏–±–∫–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ ${model}:`, error)
    const mockData = generateMockData()
    return { 
      ...mockData, 
      isLoading: false, 
      error: null,
      page: page || 1,
      pageSize: pageSize || 10
    }
  }
  
  if (apiData) {
    return {
      data: apiData.data || [],
      total: apiData.total || 0,
      isLoading,
      error: null,
      page: page || 1,
      pageSize: pageSize || 10
    }
  }
  
  const mockData = generateMockData()
  return { 
    ...mockData, 
    isLoading, 
    error: null, 
    page: page || 1, 
    pageSize: pageSize || 10 
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
function getTableConfig(
  model: string, 
  router: any,
  deleteMutation: any,
  prefetchItem: any
): AdvancedTableConfig<any> {
  const baseActions = [
    {
      label: "–ü—Ä–æ—Å–º–æ—Ç—Ä",
      icon: <Settings className="h-4 w-4" />,
      onClick: (row: any) => {
        router.push(`/dashboard/${model}/update?id=${row.id}`)
      },
      variant: "outline" as const,
      onHover: (row: any) => {
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        prefetchItem(model, row.id)
      }
    },
    {
      label: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
      icon: <Settings className="h-4 w-4" />,
      onClick: (row: any) => {
        router.push(`/dashboard/${model}/update?id=${row.id}`)
      },
      variant: "default" as const,
      onHover: (row: any) => {
        prefetchItem(model, row.id)
      }
    },
    {
      label: "–£–¥–∞–ª–∏—Ç—å",
      icon: <Settings className="h-4 w-4" />,
      onClick: (row: any) => {
        if (confirm(`–£–¥–∞–ª–∏—Ç—å ${model}?`)) {
          deleteMutation.mutate(row.id, {
            onSuccess: () => {
              console.log(`–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω ${model}:`, row.id)
            },
            onError: (error: any) => {
              console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${model}:`, error)
            }
          })
        }
      },
      variant: "destructive" as const,
      disabled: (row: any) => deleteMutation.isPending
    }
  ]

  switch (model) {
    case "notifications":
      return {
        columns: [
          commonColumns.id({ width: 100 }),
          columnHelpers.text("title", "–ó–∞–≥–æ–ª–æ–≤–æ–∫", { width: 250 }),
          columnHelpers.text("message", "–°–æ–æ–±—â–µ–Ω–∏–µ", { 
            width: 300,
            render: (value) => (
              <div className="truncate max-w-xs" title={value}>
                {value}
              </div>
            )
          }),
          columnHelpers.custom("isAlert", "–¢–∏–ø", (value, row: NotificationEntity) => (
            <span className={`px-2 py-1 rounded-full text-xs font-medium ${
              row.isAlert 
                ? 'bg-red-100 text-red-800' 
                : 'bg-gray-100 text-gray-800'
            }`}>
              {row.isAlert ? '–í–∞–∂–Ω–æ–µ' : '–û–±—ã—á–Ω–æ–µ'}
            </span>
          ), { width: 120 }),
          commonColumns.createdAt({ width: 180 })
        ],
        searchKey: "title",
        searchPlaceholder: "–ü–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É...",
        selectable: true,
        actions: [
          ...baseActions,
          {
            label: "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–∏–ø",
            onClick: (row: NotificationEntity) => {
              console.log("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞:", row)
              alert(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${row.isAlert ? '—Å–¥–µ–ª–∞–Ω–æ –æ–±—ã—á–Ω—ã–º' : '—Å–¥–µ–ª–∞–Ω–æ –≤–∞–∂–Ω—ã–º'}`)
            },
            variant: "secondary" as const
          }
        ]
      }

    case "users":
      return {
        columns: [
          commonColumns.id({ width: 100 }),
          columnHelpers.text("name", "–ò–º—è", { width: 200 }),
          columnHelpers.text("email", "Email", { width: 250 }),
          columnHelpers.badge("role", "–†–æ–ª—å", {
            admin: "default",
            user: "secondary",
            moderator: "outline"
          }, { width: 120 }),
          commonColumns.isActive({ width: 100 }),
          columnHelpers.date("lastLogin", "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥", { 
            width: 180,
            render: (value) => value ? new Date(value).toLocaleString('ru-RU') : "–ù–∏–∫–æ–≥–¥–∞"
          }),
          commonColumns.createdAt({ width: 180 })
        ],
        searchKey: "name",
        searchPlaceholder: "–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏...",
        selectable: true,
        actions: [
          ...baseActions,
          {
            label: "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
            onClick: (row: UserEntity) => {
              console.log("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞:", row)
              alert(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${row.isActive ? '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}`)
            },
            variant: "destructive" as const,
            show: (row: UserEntity) => row.role !== "admin"
          }
        ]
      }

    case "orders":
      return {
        columns: [
          commonColumns.id({ width: 100 }),
          columnHelpers.text("orderNumber", "‚Ññ –∑–∞–∫–∞–∑–∞", { width: 150 }),
          columnHelpers.text("customerName", "–ö–ª–∏–µ–Ω—Ç", { width: 200 }),
          columnHelpers.number("total", "–°—É–º–º–∞", {
            format: (value) => `${value.toLocaleString('ru-RU')} ‚ÇΩ`,
            align: "right",
            width: 150
          }),
          columnHelpers.badge("status", "–°—Ç–∞—Ç—É—Å", {
            pending: "outline",
            paid: "default",
            shipped: "secondary", 
            delivered: "default",
            cancelled: "destructive"
          }, { width: 120 }),
          commonColumns.createdAt({ width: 180 })
        ],
        searchKey: "orderNumber",
        searchPlaceholder: "–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞...",
        selectable: true,
        actions: [
          ...baseActions,
          {
            label: "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑",
            onClick: (row: OrderEntity) => {
              if (confirm("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?")) {
                console.log("–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞:", row)
                alert(`–ó–∞–∫–∞–∑ ${row.orderNumber} –æ—Ç–º–µ–Ω–µ–Ω`)
              }
            },
            variant: "destructive" as const,
            show: (row: OrderEntity) => ["pending", "paid"].includes(row.status)
          }
        ]
      }

    case "appWallet":
      return {
        columns: [
          commonColumns.id({ width: 200 }),
          columnHelpers.custom("userCount", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", (value, row: AppWalletEntity) => (
            <span className="text-sm font-medium">
              {row.userCount || 0}
            </span>
          ), { width: 120 }),
          commonColumns.createdAt({ width: 180 })
        ],
        searchKey: "id",
        searchPlaceholder: "–ü–æ–∏—Å–∫ –ø–æ ID –∫–æ—à–µ–ª—å–∫–∞...",
        selectable: true,
        actions: [
          ...baseActions,
          {
            label: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            onClick: (row: AppWalletEntity) => {
              console.log("–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", row)
              alert(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ ${row.id}`)
            },
            variant: "secondary" as const
          }
        ]
      }

    default:
      return {
        columns: [
          commonColumns.id(),
          columnHelpers.text("name", "–ù–∞–∑–≤–∞–Ω–∏–µ"),
          commonColumns.createdAt()
        ],
        searchKey: "name",
        actions: baseActions
      }
  }
}

interface PageProps {
  params: Promise<{ model: string }>
}

export default function ModelPage({ params }: PageProps) {
  const resolvedParams = use(params)
  const { model } = resolvedParams
  const router = useRouter()
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ö—É–∫–∏
  const { data, total, isLoading, page, pageSize } = useModelData(model)
  const { page: currentPage, pageSize: currentPageSize, paginationConfig } = useModelPagination(1, 10)
  const deleteMutation = useDeleteModel(model)
  const { prefetchItem } = usePrefetchModel()
  
  const modelConfig = modelConfigs[model as keyof typeof modelConfigs]
  const tableConfig = getTableConfig(model, router, deleteMutation, prefetchItem)
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
  const finalTableConfig: AdvancedTableConfig<any> = {
    ...tableConfig,
    serverPagination: paginationConfig(total)
  }

  if (!modelConfig) {
    return (
      <div className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle className="text-red-600">–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</CardTitle>
            <CardDescription>
              –ú–æ–¥–µ–ª—å "{model}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <p className="text-sm text-muted-foreground">
                –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {Object.keys(modelConfigs).join(", ")}
              </p>
              <Button onClick={() => router.push("/dashboard")} variant="outline">
                –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <div className="flex items-center justify-between">
        <div className="space-y-1">
          <div className="flex items-center gap-3">
            <span className="text-2xl">{modelConfig.icon}</span>
            <div>
              <h1 className="text-3xl font-bold tracking-tight">
                {modelConfig.title}
              </h1>
              <p className="text-muted-foreground">
                {modelConfig.description}
              </p>
            </div>
          </div>
        </div>
        
        <div className="flex items-center gap-2">
          <Badge variant="outline" className="capitalize">
            {model}
          </Badge>
          <Button onClick={() => router.refresh()} variant="outline" size="sm">
            <RefreshCw className="h-4 w-4 mr-2" />
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>
          <Button 
            size="sm"
            onClick={() => router.push(`/dashboard/${model}/create`)}
          >
            <Plus className="h-4 w-4 mr-2" />
            –°–æ–∑–¥–∞—Ç—å
          </Button>
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{(total || 0).toLocaleString('ru-RU')}</div>
            <p className="text-xs text-muted-foreground">
              –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              –ù–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{data?.length || 0}</div>
            <p className="text-xs text-muted-foreground">
              –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page || 1} –∏–∑ {Math.ceil((total || 0) / (pageSize || 10))}
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              {model === 'notifications' ? '–í–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' : '–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π'}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">
              {model === 'notifications' 
                ? data?.filter((item: any) => item.isAlert === true).length || 0
                : data?.filter((item: any) => item.isActive !== false).length || 0
              }
            </div>
            <p className="text-xs text-muted-foreground">
              {model === 'notifications' ? '–í–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' : '–ê–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤'}
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">–°–µ–π—á–∞—Å</div>
            <p className="text-xs text-muted-foreground">
              {new Date().toLocaleString('ru-RU')}
            </p>
          </CardContent>
        </Card>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>–°–ø–∏—Å–æ–∫ {modelConfig.title.toLowerCase()}</CardTitle>
              <CardDescription>
                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª–∏ "{model}"
              </CardDescription>
            </div>
            <div className="flex items-center gap-2">
              <Button variant="outline" size="sm">
                <Filter className="h-4 w-4 mr-2" />
                –§–∏–ª—å—Ç—Ä—ã
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <AdvancedUniversalTable
            config={finalTableConfig}
            data={data || []}
            isLoading={isLoading}
          />
        </CardContent>
      </Card>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <Card>
        <CardHeader>
          <CardTitle>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid gap-4 md:grid-cols-2">
            <div>
              <h4 className="text-sm font-medium mb-2">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã</h4>
              <dl className="space-y-1 text-sm">
                <div className="flex justify-between">
                  <dt className="text-muted-foreground">–ú–æ–¥–µ–ª—å:</dt>
                  <dd className="font-mono">{model}</dd>
                </div>
                <div className="flex justify-between">
                  <dt className="text-muted-foreground">–°—Ç—Ä–∞–Ω–∏—Ü–∞:</dt>
                  <dd>{page}</dd>
                </div>
                <div className="flex justify-between">
                  <dt className="text-muted-foreground">–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã:</dt>
                  <dd>{pageSize}</dd>
                </div>
                <div className="flex justify-between">
                  <dt className="text-muted-foreground">–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü:</dt>
                  <dd>{Math.ceil((total || 0) / (pageSize || 10))}</dd>
                </div>
              </dl>
            </div>
            
            <div>
              <h4 className="text-sm font-medium mb-2">–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</h4>
              <div className="space-y-1 text-sm">
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  <span>–ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  <span>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  <span>–°–µ—Ä–≤–µ—Ä–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  <span>–í—ã–±–æ—Ä —Å—Ç—Ä–æ–∫</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  <span>–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</span>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
